var documenterSearchIndex = {"docs":
[{"location":"#WCS.jl","page":"Home","title":"WCS.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Code) (Image: Build Status) (Image: PkgEval) (Image: Coverage) (Image: License)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Astronomical World Coordinate System library for Julia. This package wraps the WCSLIB C library. This is a tool made for users who are already familiar with WCS transformations. If you are not, please reference the following manuscripts","category":"page"},{"location":"","page":"Home","title":"Home","text":"Representation of world coordinates in FITS\nRepresentations of celestial coordinates in FITS\nRepresentations of spectral coordinates in FITS\nRepresentations of distortions in FITS world coordinate systems","category":"page"},{"location":"#Table-of-Contents","page":"Home","title":"Table of Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"From the REPL, press ] to enter Pkg mode","category":"page"},{"location":"","page":"Home","title":"Home","text":"(v 1.2) pkg> add WCS","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Import the library","category":"page"},{"location":"","page":"Home","title":"Home","text":"DocTestSetup = quote\n    using WCS\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using WCS","category":"page"},{"location":"","page":"Home","title":"Home","text":"There are many ways to utilize WCS transformations. Let's make one for a 2-dimensional array (like an image) from scratch.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> wcs = WCSTransform(2;\n                          cdelt = [-0.066667, 0.066667],\n                          ctype = [\"RA---AIR\", \"DEC--AIR\"],\n                          crpix = [-234.75, 8.3393],\n                          crval = [0., -90],\n                          pv    = [(2, 1, 45.0)])\nWCSTransform(naxis=2,cdelt=[-0.066667, 0.066667],crval=[0.0, -90.0],crpix=[-234.75, 8.3393])","category":"page"},{"location":"","page":"Home","title":"Home","text":"We can also create one from a FITS header if it contains the appropriate keywords","category":"page"},{"location":"","page":"Home","title":"Home","text":"# Or from a FITS header with appropriate keywords\njulia> wcs_array = WCS.from_header(header)\n\njulia> wcs = wcs_array[1]\n","category":"page"},{"location":"","page":"Home","title":"Home","text":"Now we can do conversions between pixel and world coordinates.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nthat WCS transforms use pixel (0, 0) as the top-left corner (not 1-indexed!!!)","category":"page"},{"location":"","page":"Home","title":"Home","text":"# convert pixel -> world coordinates\njulia> pixcoords = [0.0  24.0  45.0;  # x coordinates\n                    0.0  38.0  98.0]  # y coordinates\n2×3 Matrix{Float64}:\n 0.0  24.0  45.0\n 0.0  38.0  98.0\n\njulia> worldcoords = pix_to_world(wcs, pixcoords)\n2×3 Matrix{Float64}:\n 267.965   276.539   287.771\n -73.7366  -71.9741  -69.6781\njulia> pixcoords = world_to_pix(wcs, worldcoords)\n2×3 Matrix{Float64}:\n  1.16529e-12  24.0  45.0\n -7.10543e-14  38.0  98.0\n","category":"page"},{"location":"#API/Reference","page":"Home","title":"API/Reference","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [WCS]","category":"page"},{"location":"#WCS.WCSTransform","page":"Home","title":"WCS.WCSTransform","text":"WCSTransform(naxis; kwds...)\n\nConstruct a WCS transformation with the given number of axes naxis. Keyword arguments can be passed to set various attributes of the transform. Specifying keyword arguments is equivalent to setting them after construction:\n\njulia> wcs = WCSTransform(2; crpix=[1000., 1000.])\n\nis equilvalent to:\n\njulia> wcs = WCSTransform(2)\n\njulia> wcs.crpix = [1000., 1000.]\n\nProperties\n\nBelow is the entire list of public properties for a WCSTransform\n\nKeyword Type Description\nnaxis Int Number of dimensions\ncrval Vector{Float}[naxis] coordinate value at reference point\ncrpix Vector{Float}[naxis] array location of the reference point in pixels\ncdelt Vector{Float}[naxis] coordinate increment at reference point\ncrder Vector{Float}[naxis] random error in coordinate\ncsyer Vector{Float}[naxis] systematic error in coordinate\nctype Vector{String}[naxis] axis type (8 characters)\ncrota Vector{Float}[naxis] rotation from stated coordinate type\ncunit Vector{String}[naxis] units of axes\ncunit Vector{String}[naxis] names of axes\npc Matrix{Float}[naxis, naxis] linear transformation matrix\ncd Matrix{Float}[naxis, naxis] linear transformation matrix (with scale)\nequinox Float the equinox associated with dynamical equatorial or ecliptic coordinate systems\nlatpole Float the native latitude of the celestial pole\nlonpole Float the native longitude of the celestial pole\nmjdavg Float Modified Julian Date corresponding to DATE-AVG\nmjdobs Float Modified Julian Date corresponding to DATE-OBS\nrestfrq Float rest frequency (Hz)\nrestwav Float rest wavelength (m)\nvelangl Float velocity angle\nvelosys Float relative radial velocity\nzsource Float the redshift of the source\ncolnum Int column of FITS binary table associated with this WCS\ndateavg String representative mid-point of the date of observation\ndateobs String start of the date of observation\nradesys String the equatorial or ecliptic coordinate system type\nspecsys String spectral reference frame (standard of rest)\nssysobs String spectral reference frame\nssyssrc String spectral reference frame for redshift\nwcsname String name of this coordinate representation\nobsgeo Vector{Float}[3] or Vector{Float}[6] location of the observer in a standard terrestrial reference frame\nalt String character code for alternate coordinate descriptions\n\n\n\n\n\n","category":"type"},{"location":"#WCS.from_header-Tuple{String}","page":"Home","title":"WCS.from_header","text":"from_header(header[; relax=WCS.HDR_ALL, ctrl=0, ignore_rejected=false, table=false])\n\nParse the FITS image header in the String header, returning a Vector{WCSTransform} giving all the transforms defined in the header. The relax determines the treatment of non-standard keywords. The default is to accept all known non-standard keywords. Use relax=WCS.HDR_NONE to ignore all non-standard keywords. Use, e.g., relax=(WCS.HDR_RADECSYS & WCS.HDR_CROTAia) to only accept selected non-standard keywords.\n\n\n\n\n\n","category":"method"},{"location":"#WCS.obsfix-Tuple{Integer, WCSTransform}","page":"Home","title":"WCS.obsfix","text":"obsfix(ctrl::Integer, wcs::WCSTransform)\n\nComplete the obsgeo field wcs of observatory coordinates.  That is, if only the (x,y,z) Cartesian coordinate triplet or the (l,b,h) geodetic coordinate triplet are set, then it derives the other triplet from it. If both triplets are set, then it checks for consistency at the level of 1 metre.\n\nParameters\n\nctrl: flag that controls behaviour if one triplet is defined and the other is only partially defined:\n0: Reset only the undefined elements of an incomplete coordinate triplet.\n1: Reset all elements of an incomplete triplet.\n2: Don't make any changes, check for consistency only. Returns an error if either of the two triplets is incomplete.\nwcs: Coordinate transformation parameters. Its obsgeo field may be changed.\n\nReturns\n\n-1: No change required (not an error).\n0: Success.\n1: Null wcsprm pointer passed.\n5: Invalid parameter value.\n\n\n\n\n\n","category":"method"},{"location":"#WCS.pix_to_world!-Tuple{WCSTransform, VecOrMat{Float64}, VecOrMat{Float64}}","page":"Home","title":"WCS.pix_to_world!","text":"pix_to_world!(wcs, pixcoords, worldcoords[; stat=, imcoords=, phi=, theta=])\n\nConvert the array of pixel coordinates pixcoords to world coordinates according to the WCSTransform wcs, storing the result in the worldcoords and stat arrays. pixcoords should be a 2-d array where \"pixcoords[:, i]\" is the i-th set of coordinates, or a 1-d array representing a single set of coordinates. worldcoords must be the same size and type as pixcoords.\n\nIf given, the arrays stat, imcoords, phi, theta will be used to store intermediate results. Their sizes and types must all match pixcoords, except for stat which should be the same size but of type Cint (typically Int32).\n\n\n\n\n\n","category":"method"},{"location":"#WCS.pix_to_world-Tuple{WCSTransform, VecOrMat{Float64}}","page":"Home","title":"WCS.pix_to_world","text":"pix_to_world(wcs, pixcoords)\n\nConvert the array of pixel coordinates pixcoords to world coordinates according to the WCSTransform wcs. pixcoords should be a 2-d array where \"pixcoords[:, i]\" is the i-th set of coordinates, or a 1-d array representing a single set of coordinates.\n\nThe return value is the same shape as pixcoords.\n\n\n\n\n\n","category":"method"},{"location":"#WCS.to_header-Tuple{WCSTransform}","page":"Home","title":"WCS.to_header","text":"to_header(wcs[; relax=WCS.HDR_NONE])\n\nEncode the WCSTransform wcs as a FITS header string. The relax keyword controls how non-standard extensions to the WCS standard are handled.\n\n\n\n\n\n","category":"method"},{"location":"#WCS.world_to_pix!-Tuple{WCSTransform, VecOrMat{Float64}, VecOrMat{Float64}}","page":"Home","title":"WCS.world_to_pix!","text":"world_to_pix!(wcs, worldcoords, pixcoords[; stat=, phi=, theta=, imcoords=])\n\nConvert the array of pixel coordinates worldcoords to pixel coordinates according to the WCSTransform wcs, storing the result in the pixcoords array. worldcoords should be a 2-d array where \"worldcoords[:, i]\" is the i-th set of coordinates, or a 1-d array representing a single set of coordinates. pixcoords must be the same size and type as worldcoords.\n\nIf given, the arrays stat, imcoords, phi, theta will be used to store intermediate results. Their sizes and types must all match worldcoords, except for stat which should be the same size but of type Cint (typically Int32).\n\n\n\n\n\n","category":"method"},{"location":"#WCS.world_to_pix-Tuple{WCSTransform, VecOrMat{Float64}}","page":"Home","title":"WCS.world_to_pix","text":"world_to_pix(wcs, worldcoords)\n\nConvert the array of world coordinates worldcoords to pixel coordinates according to the WCSTransform wcs. worldcoords is a 2-d array where \"worldcoords[:, i]\" is the i-th set of coordinates, or a 1-d array representing a single set of coordinates.\n\nThe return value is the same size as worldcoords.\n\n\n\n\n\n","category":"method"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
