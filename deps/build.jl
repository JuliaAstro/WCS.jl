using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libwcs"], :libwcs),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaAstro/WCSLIBBuilder/releases/download/v5.20"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/WCS.v5.20.0.aarch64-linux-gnu.tar.gz", "a407963dbc317411399c77d0d68e6570fbf73ba4912f920ebc5e26bf6ca4748f"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/WCS.v5.20.0.aarch64-linux-musl.tar.gz", "1dc3b23b96d11ee383bce3de25e190816988ab45046e6ddb8bf8db629f214854"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/WCS.v5.20.0.arm-linux-gnueabihf.tar.gz", "60de5f7e01ded51b4ff72ed87e39615c94e88a1d62e750c24bf228e2b331759e"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/WCS.v5.20.0.arm-linux-musleabihf.tar.gz", "347a408b6ecd91d6cdb95a9dc0594addbd48fdf01406dda7d99bee843e045fe4"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/WCS.v5.20.0.i686-linux-gnu.tar.gz", "a6b792f6ed7ab491529f570333046903de932b1db816401e33af05db1ad1efd6"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/WCS.v5.20.0.i686-linux-musl.tar.gz", "7296fc53cdca77ebd4fd07ee361f67e3329cf4693ab966a2577d8d8f20d514a7"),
    Windows(:i686) => ("$bin_prefix/WCS.v5.20.0.i686-w64-mingw32.tar.gz", "f96bc544dff3d9988bfac172b767c4df38144f02ab502fab36833158a6fa43ec"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/WCS.v5.20.0.powerpc64le-linux-gnu.tar.gz", "b2617b5fafbce46d0293246d1afb89ffd45b18e630e9cadfe9ab738415e742d8"),
    MacOS(:x86_64) => ("$bin_prefix/WCS.v5.20.0.x86_64-apple-darwin14.tar.gz", "589b56967bfb51ae5d90a961ac47eea29d7cb39a3cc4a682351d8b8f63e0750f"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/WCS.v5.20.0.x86_64-linux-gnu.tar.gz", "2eeff26cfde7ac417a10c91826b9e559fc877f5464f037935d41d471dc878f08"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/WCS.v5.20.0.x86_64-linux-musl.tar.gz", "18a0ae7659c8483a6f98fee7df8b3eb8e3168ac0c121789b0690bc92c5844e9e"),
    FreeBSD(:x86_64) => ("$bin_prefix/WCS.v5.20.0.x86_64-unknown-freebsd11.1.tar.gz", "91e1af0dafbe752fcc0b0a612fdab11edd8eddfc0d6bd9d72886ad14e40d0e74"),
    Windows(:x86_64) => ("$bin_prefix/WCS.v5.20.0.x86_64-w64-mingw32.tar.gz", "16d29c78bf13d1c1835bd5f52ab05c107467f88be8ddc92144c8a71147fa56dd"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
