using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libwcs"], :libwcs),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaPackaging/Yggdrasil/releases/download/WCS-v6.3.0+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/WCS.v6.3.0.aarch64-linux-gnu.tar.gz", "5544804ed4e94c509c0411c32e903be572040a62e8a9111874dc996165efdcfa"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/WCS.v6.3.0.aarch64-linux-musl.tar.gz", "4b253a563f3bbaa07bf45d7960819df1162f228baa016ff8f683a0ff61e69173"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/WCS.v6.3.0.arm-linux-gnueabihf.tar.gz", "7b9a06ea7961a51dafd78050d609a4d8f96bdb29a08239fef166f6b04b8ea65f"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/WCS.v6.3.0.arm-linux-musleabihf.tar.gz", "dcca70f926927dcdf690a4e72f350db7e3f56a6ef2087c3d5ddc8080148b4aac"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/WCS.v6.3.0.i686-linux-gnu.tar.gz", "755f087f73260bdcfe0e56b64a01ffcaabd7681a996022c8dd5070f0aa254215"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/WCS.v6.3.0.i686-linux-musl.tar.gz", "5988834acd5ca8135985ad42532fd9eed95dd5cf6c62425a300eecc224b2c811"),
    Windows(:i686) => ("$bin_prefix/WCS.v6.3.0.i686-w64-mingw32.tar.gz", "3fc83c6bba47c0d507ce31f20724a390c41e40e12a49934ebdbae3d75cfcb477"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/WCS.v6.3.0.powerpc64le-linux-gnu.tar.gz", "a476b36c0d2325a8a23c1be2bce9ca9366ef20187df87f999c410eaf384089a9"),
    MacOS(:x86_64) => ("$bin_prefix/WCS.v6.3.0.x86_64-apple-darwin14.tar.gz", "45c5d9e57e351bb65d84906cb34fc50969e44ab9cbe3ff171b17966c8d7d50b7"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/WCS.v6.3.0.x86_64-linux-gnu.tar.gz", "a344a1150dae9c5844bdd4dd22e59a4ce8c4636f40369454b06ad07bc84b27cf"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/WCS.v6.3.0.x86_64-linux-musl.tar.gz", "c7a404e6122f6891e0d5e5137904b948f372fcead1f39eaaed8c33f630f41677"),
    FreeBSD(:x86_64) => ("$bin_prefix/WCS.v6.3.0.x86_64-unknown-freebsd11.1.tar.gz", "c55b9968c960beeb5ee2d2a1dfa9505b37a4f725070312ce36d00e4e0bbfdff5"),
    Windows(:x86_64) => ("$bin_prefix/WCS.v6.3.0.x86_64-w64-mingw32.tar.gz", "837b86140c53feebf744aab219bc1a49c6c29634af0098a024b9a0ac09faf4ac"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
