using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libwcs"], :libwcs),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaAstro/WCSLIBBuilder/releases/download/v5.13"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/WCS.v5.13.0.aarch64-linux-gnu.tar.gz", "f4f2816684fd172e67b4c681974890241efd813b23c61dc8229a32c062ce732c"),
    Linux(:aarch64, :musl) => ("$bin_prefix/WCS.v5.13.0.aarch64-linux-musl.tar.gz", "b5f85a34f6e66bcf741e1c8f78bd3694a569106611e2dcf802db87b0fa542fb8"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/WCS.v5.13.0.arm-linux-gnueabihf.tar.gz", "dd5fa967756e0f937d3b2560b0e4c7ad1d891be7890fa737faced19067007326"),
    Linux(:armv7l, :musl, :eabihf) => ("$bin_prefix/WCS.v5.13.0.arm-linux-musleabihf.tar.gz", "47fcb6e2774f833ea688b613ef33591e669bb2008e29c0ff74ce0cb053d2b41b"),
    Linux(:i686, :glibc) => ("$bin_prefix/WCS.v5.13.0.i686-linux-gnu.tar.gz", "fbaa6e797709688880fe7783921f292f5eb8848249a14790f873a370f1cd43ee"),
    Linux(:i686, :musl) => ("$bin_prefix/WCS.v5.13.0.i686-linux-musl.tar.gz", "a0e291082c0f5460293b619a737ad0dbf5769b842d0964af719f7b7c6fbad90a"),
    Windows(:i686) => ("$bin_prefix/WCS.v5.13.0.i686-w64-mingw32.tar.gz", "edc28d5c439413dc5d053fb9e68f21f8fa55c8dbfa27592c9b8257d99c9840d5"),
    Linux(:powerpc64le, :glibc) => ("$bin_prefix/WCS.v5.13.0.powerpc64le-linux-gnu.tar.gz", "ed48b6fc991e91e8848136f4fb1cf927b785c44bc4567be66e16775b82efe1d8"),
    MacOS(:x86_64) => ("$bin_prefix/WCS.v5.13.0.x86_64-apple-darwin14.tar.gz", "28f908460a6dec6cffa261266c11357536f844ceeadbc57695db144b9e387f9a"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/WCS.v5.13.0.x86_64-linux-gnu.tar.gz", "c90452ec658e4c9fe5bd26fa65050ad1227d74f1e8b2e3f519e3bd53768740dd"),
    Linux(:x86_64, :musl) => ("$bin_prefix/WCS.v5.13.0.x86_64-linux-musl.tar.gz", "b109d511e84df72a7390893b5413dababfdff3fc0868bbdbe1af9f42fdeb60b1"),
    FreeBSD(:x86_64) => ("$bin_prefix/WCS.v5.13.0.x86_64-unknown-freebsd11.1.tar.gz", "5a5257bf2c535755cbedfaffad2019a761c33a1d5cb898dc2bc44c7381afbcfc"),
    Windows(:x86_64) => ("$bin_prefix/WCS.v5.13.0.x86_64-w64-mingw32.tar.gz", "fe6460334a3bf726d3615bd479f0324cd2629167405729e2ebcc45534559ff6a"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
