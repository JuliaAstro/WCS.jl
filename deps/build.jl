using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libwcs"], :libwcs),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaAstro/WCSLIBBuilder/releases/download/v5.13a"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/WCS.v5.13.0.aarch64-linux-gnu.tar.gz", "aa97422c393f7763186661f40bd0bfcb7c44bdba90ba851b2f7ddc0e75d27e4c"),
    Linux(:aarch64, :musl) => ("$bin_prefix/WCS.v5.13.0.aarch64-linux-musl.tar.gz", "c5099bf07d2ce4c4df5133d45dba380e2219994ea8b786ce9094cd1221e66614"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/WCS.v5.13.0.arm-linux-gnueabihf.tar.gz", "9375bdec9e2195f97665a77cc8b4ef4b0b7456d56a678484c3ac9546819f9f1a"),
    Linux(:armv7l, :musl, :eabihf) => ("$bin_prefix/WCS.v5.13.0.arm-linux-musleabihf.tar.gz", "91466efa10db762f08cef00bb8ed7cd0c9e148d60a3870a2d33c8e6a7c519558"),
    Linux(:i686, :glibc) => ("$bin_prefix/WCS.v5.13.0.i686-linux-gnu.tar.gz", "d35e228aa50e853ab2b7bb7aae27c731e012b577501b9b349b3e383f4a04caf1"),
    Linux(:i686, :musl) => ("$bin_prefix/WCS.v5.13.0.i686-linux-musl.tar.gz", "19d49c6dceccf65443361312daeb37b6fb2ce3018d19c78c84eff9561a396dc6"),
    Windows(:i686) => ("$bin_prefix/WCS.v5.13.0.i686-w64-mingw32.tar.gz", "72b5f1640b7dec7e64345ff202d9cf72d9267c097acfa77fce0624305e4cdf2a"),
    Linux(:powerpc64le, :glibc) => ("$bin_prefix/WCS.v5.13.0.powerpc64le-linux-gnu.tar.gz", "8a788718c2a7d869ea2fee98b4f74d6116e9bce691a03b4a0bf14c8fab3ee56d"),
    MacOS(:x86_64) => ("$bin_prefix/WCS.v5.13.0.x86_64-apple-darwin14.tar.gz", "5f761d21891558605fc5073135a8c60ec07074e49004a9ae3802cf4646aa1b01"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/WCS.v5.13.0.x86_64-linux-gnu.tar.gz", "bb59403fcb5537c5cd61c836687dd97806e7567ad146d81fa5f5b721b702dc70"),
    Linux(:x86_64, :musl) => ("$bin_prefix/WCS.v5.13.0.x86_64-linux-musl.tar.gz", "f3650b34fe8e5ee279a57bf54bc5773960a050c6947ef0291944d7a201f9f454"),
    FreeBSD(:x86_64) => ("$bin_prefix/WCS.v5.13.0.x86_64-unknown-freebsd11.1.tar.gz", "a9d66fe57e0a8cc441f16913079f060163eeb5934d70a3e1c372b06c71a44367"),
    Windows(:x86_64) => ("$bin_prefix/WCS.v5.13.0.x86_64-w64-mingw32.tar.gz", "729650e03944f9c7335c5c835e946ef5703592fe1750c1b009db7a3613cba280"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
